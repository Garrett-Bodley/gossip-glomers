2024-05-28 13:10:21,940{GMT}	INFO	[jepsen test runner] jepsen.core: Test version e062acb3c28c8e365040becc9065228d9eece76c (plus uncommitted changes)
2024-05-28 13:10:21,941{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin demo/ruby/echo.rb --time-limit 5
2024-05-28 13:10:21,985{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count nil
 :availability nil
 :max-txn-length 4
 :concurrency 5
 :db
 #object[maelstrom.db$db$reify__16142
         "0xd15f98a"
         "maelstrom.db$db$reify__16142@d15f98a"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x8d40f07" "2024-05-28T13:10:21.913-04:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x196c8b93"
         "maelstrom.net$jepsen_net$reify__15251@196c8b93"]
 :client
 #object[maelstrom.workload.echo$client$reify__16863
         "0x307ca947"
         "maelstrom.workload.echo$client$reify__16863@307ca947"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x61d1315b"
         "java.util.concurrent.CyclicBarrier@61d1315b"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x49d5b651"
         "jepsen.checker$compose$reify__11881@49d5b651"]
 :argv ("test" "-w" "echo" "--bin" "demo/ruby/echo.rb" "--time-limit" "5")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@34989ceb"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@61fb3dae"]})
 :nodes ["n1" "n2" "n3" "n4" "n5"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "demo/ruby/echo.rb"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 5000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x5aad4194"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@5aad4194"],
                   :gen nil})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x50a1c2f3"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@50a1c2f3"],
                   :gen (jepsen.generator.Stagger
                         {:dt 400000000,
                          :next-time nil,
                          :gen (jepsen.generator.EachThread
                                {:fresh-gen #object[maelstrom.workload.echo$workload$fn__16882
                                                    "0x453ca7f"
                                                    "maelstrom.workload.echo$workload$fn__16882@453ca7f"],
                                 :context-filters #object[clojure.core$promise$reify__8591
                                                          "0x5d41b929"
                                                          {:status :pending,
                                                           :val nil}],
                                 :gens {}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x6dd0e2f4"
         "maelstrom.net$jepsen_os$reify__15254@6dd0e2f4"]
 :time-limit 5
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-05-28 13:10:23,282{GMT}	INFO	[jepsen node n1] maelstrom.net: Starting Maelstrom network
2024-05-28 13:10:23,283{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-05-28 13:10:23,284{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-05-28 13:10:23,284{GMT}	INFO	[jepsen node n4] maelstrom.db: Setting up n4
2024-05-28 13:10:23,284{GMT}	INFO	[jepsen node n5] maelstrom.db: Setting up n5
2024-05-28 13:10:23,285{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2024-05-28 13:10:23,285{GMT}	INFO	[jepsen node n3] maelstrom.db: Setting up n3
2024-05-28 13:10:23,285{GMT}	INFO	[jepsen node n5] maelstrom.process: launching demo/ruby/echo.rb []
2024-05-28 13:10:23,285{GMT}	INFO	[jepsen node n2] maelstrom.process: launching demo/ruby/echo.rb []
2024-05-28 13:10:23,285{GMT}	INFO	[jepsen node n3] maelstrom.process: launching demo/ruby/echo.rb []
2024-05-28 13:10:23,285{GMT}	INFO	[jepsen node n4] maelstrom.process: launching demo/ruby/echo.rb []
2024-05-28 13:10:23,286{GMT}	INFO	[jepsen node n1] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-05-28 13:10:23,288{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2024-05-28 13:10:23,288{GMT}	INFO	[jepsen node n1] maelstrom.process: launching demo/ruby/echo.rb []
2024-05-28 13:10:23,463{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-05-28 13:10:23,477{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 106"
2024-05-28 13:10:23,480{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:echo	{:type "echo_ok", :echo "Please echo 106", :msg_id 2, :in_reply_to 1}
2024-05-28 13:10:23,612{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:echo	"Please echo 74"
2024-05-28 13:10:23,614{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:echo	{:type "echo_ok", :echo "Please echo 74", :msg_id 2, :in_reply_to 1}
2024-05-28 13:10:23,927{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 78"
2024-05-28 13:10:23,932{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 78", :msg_id 2, :in_reply_to 1}
2024-05-28 13:10:24,198{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 61"
2024-05-28 13:10:24,200{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :echo "Please echo 61", :msg_id 2, :in_reply_to 1}
2024-05-28 13:10:24,496{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:echo	"Please echo 84"
2024-05-28 13:10:24,498{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:echo	{:type "echo_ok", :echo "Please echo 84", :msg_id 3, :in_reply_to 2}
2024-05-28 13:10:24,748{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:invoke	:echo	"Please echo 80"
2024-05-28 13:10:24,750{GMT}	INFO	[jepsen worker 4] jepsen.util: 4	:ok	:echo	{:type "echo_ok", :echo "Please echo 80", :msg_id 3, :in_reply_to 2}
2024-05-28 13:10:24,846{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 49"
2024-05-28 13:10:24,849{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 49", :msg_id 2, :in_reply_to 1}
2024-05-28 13:10:25,172{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 120"
2024-05-28 13:10:25,175{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:echo	{:type "echo_ok", :echo "Please echo 120", :msg_id 3, :in_reply_to 2}
2024-05-28 13:10:25,272{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 83"
2024-05-28 13:10:25,274{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:echo	{:type "echo_ok", :echo "Please echo 83", :msg_id 4, :in_reply_to 3}
2024-05-28 13:10:25,602{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 49"
2024-05-28 13:10:25,605{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:echo	{:type "echo_ok", :echo "Please echo 49", :msg_id 5, :in_reply_to 4}
2024-05-28 13:10:25,660{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:echo	"Please echo 66"
2024-05-28 13:10:25,662{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:echo	{:type "echo_ok", :echo "Please echo 66", :msg_id 4, :in_reply_to 3}
2024-05-28 13:10:25,853{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 93"
2024-05-28 13:10:25,855{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 93", :msg_id 3, :in_reply_to 2}
2024-05-28 13:10:26,218{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:echo	"Please echo 41"
2024-05-28 13:10:26,221{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:echo	{:type "echo_ok", :echo "Please echo 41", :msg_id 5, :in_reply_to 4}
2024-05-28 13:10:26,531{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 80"
2024-05-28 13:10:26,533{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 80", :msg_id 4, :in_reply_to 3}
2024-05-28 13:10:26,907{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 41"
2024-05-28 13:10:26,910{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 41", :msg_id 5, :in_reply_to 4}
2024-05-28 13:10:27,231{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 96"
2024-05-28 13:10:27,234{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:ok	:echo	{:type "echo_ok", :echo "Please echo 96", :msg_id 6, :in_reply_to 5}
2024-05-28 13:10:27,634{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 69"
2024-05-28 13:10:27,636{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 69", :msg_id 3, :in_reply_to 2}
2024-05-28 13:10:27,644{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 14"
2024-05-28 13:10:27,646{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:echo	{:type "echo_ok", :echo "Please echo 14", :msg_id 6, :in_reply_to 5}
2024-05-28 13:10:28,021{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 91"
2024-05-28 13:10:28,023{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 91", :msg_id 4, :in_reply_to 3}
2024-05-28 13:10:28,360{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:invoke	:echo	"Please echo 98"
2024-05-28 13:10:28,362{GMT}	INFO	[jepsen worker 3] jepsen.util: 3	:ok	:echo	{:type "echo_ok", :echo "Please echo 98", :msg_id 6, :in_reply_to 5}
2024-05-28 13:10:28,369{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 98"
2024-05-28 13:10:28,372{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:type "echo_ok", :echo "Please echo 98", :msg_id 5, :in_reply_to 4}
2024-05-28 13:10:28,390{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 7"
2024-05-28 13:10:28,392{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:echo	{:type "echo_ok", :echo "Please echo 7", :msg_id 7, :in_reply_to 6}
2024-05-28 13:10:28,405{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2024-05-28 13:10:28,449{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2024-05-28 13:10:28,449{GMT}	INFO	[jepsen node n5] maelstrom.db: Tearing down n5
2024-05-28 13:10:28,449{GMT}	INFO	[jepsen node n3] maelstrom.db: Tearing down n3
2024-05-28 13:10:28,449{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2024-05-28 13:10:28,449{GMT}	INFO	[jepsen node n4] maelstrom.db: Tearing down n4
2024-05-28 13:10:30,316{GMT}	INFO	[jepsen node n1] maelstrom.net: Shutting down Maelstrom network
2024-05-28 13:10:30,320{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2024-05-28 13:10:30,527{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2024-05-28 13:10:30,534{GMT}	INFO	[jepsen results] jepsen.store: Wrote /Users/garrettbodley/Code/gossip-glomers/maelstrom/store/echo/20240528T131021.913-0400/results.edn
2024-05-28 13:10:30,557{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? true,
         :count 22,
         :ok-count 22,
         :fail-count 0,
         :info-count 0,
         :by-f {:echo {:valid? true,
                       :count 22,
                       :ok-count 22,
                       :fail-count 0,
                       :info-count 0}}},
 :availability {:valid? true, :ok-fraction 1.0},
 :net {:all {:send-count 54,
             :recv-count 54,
             :msg-count 54,
             :msgs-per-op 2.4545455},
       :clients {:send-count 54, :recv-count 54, :msg-count 54},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:valid? true, :errors ()},
 :valid? true}


Everything looks good! ヽ(‘ー`)ノ
